rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }

    // üî• USERS COLLECTION
    match /users/{userId} {
      // ‚úÖ Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // ‚úÖ Admins can read all users
      allow read: if isAdmin();
      // ‚úÖ Users can write their own data
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // üî• ACTIVITIES COLLECTION (For Dashboard)
    match /activities/{activityId} {
      allow read: if isAuthenticated(); // ‚úÖ Any authenticated user can read
    }

    // üî• FORUMS COLLECTION
    match /forums/{forumId} {
      // Allow reading forums
      allow read: if resource.data.status == "Approved" || isAdmin();
      
      // Allow creating forums if authenticated
      allow create: if isAuthenticated();
      
      // Allow updating likes
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'likedBy']);
      
      // Allow updating own content
      allow update: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content']);
      
      // Allow admin updates
      allow update, delete: if isAdmin();
      
      // üìù COMMENTS SUBCOLLECTION - SIMPLIFIED RULES
      match /comments/{commentId} {
        // Anyone can read comments
        allow read: if true;
        
        // Simplified comment creation rule
        allow create: if isAuthenticated() && 
          request.resource.data.authorId == request.auth.uid;
        
        // Allow users to update/delete their own comments
        allow update, delete: if isAuthenticated() && 
          resource.data.authorId == request.auth.uid;
      }
    }

    // üî• COMMENTS COLLECTION (For Dashboard)
    match /comments/{commentId} {
      allow read: if isAuthenticated(); // ‚úÖ Any authenticated user can read
    }
    
    // üî• PLACES COLLECTION (For Dashboard)
    match /places/{placeId} {
      // ‚úÖ Allow all authenticated users to read
      allow read: if isAuthenticated();

      // ‚úÖ Allow Admins full access
      allow write, update, delete: if isAdmin();

      // ‚úÖ Allow users to update only likes and likedBy fields
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']) &&
        request.resource.data.likes is int &&
        request.resource.data.likedBy is list;
    }

    // üî• POSTS COLLECTION (For Dashboard Metrics)
    match /posts/{postId} {
      // ‚úÖ Anyone can read "Approved" posts or if they're admin
      allow read: if resource.data.status == "Approved" || isAdmin();

      // ‚úÖ Users can create posts
      allow create: if isAuthenticated();

      // ‚úÖ Users can update their own "For Review" posts
      allow update: if isAuthenticated() && 
                   request.auth.uid == resource.data.userId &&
                   resource.data.status == "For Review";

      // ‚úÖ Only Admins can approve/reject posts
      allow update: if isAdmin() &&
                   request.resource.data.keys().hasAny(['status']);

      // ‚úÖ Only Admins can delete posts
      allow delete: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}